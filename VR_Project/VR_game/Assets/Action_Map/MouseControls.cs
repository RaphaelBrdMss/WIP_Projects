//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Action_Map/MouseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseControls"",
    ""maps"": [
        {
            ""name"": ""MousseControls"",
            ""id"": ""4c28d157-c655-46e3-b83f-72602421e3e9"",
            ""actions"": [
                {
                    ""name"": ""Vertical"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aa0a9e30-80d8-4646-af6e-4d7fc28c4266"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""93898b94-4eae-47cb-b08c-f3b90169afd4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0fefe48e-101e-4191-88bd-724cdbba840b"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12a7218f-afeb-49f5-98d8-b1a88e00e73d"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MousseControls
        m_MousseControls = asset.FindActionMap("MousseControls", throwIfNotFound: true);
        m_MousseControls_Vertical = m_MousseControls.FindAction("Vertical", throwIfNotFound: true);
        m_MousseControls_Horizontal = m_MousseControls.FindAction("Horizontal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MousseControls
    private readonly InputActionMap m_MousseControls;
    private IMousseControlsActions m_MousseControlsActionsCallbackInterface;
    private readonly InputAction m_MousseControls_Vertical;
    private readonly InputAction m_MousseControls_Horizontal;
    public struct MousseControlsActions
    {
        private @MouseControls m_Wrapper;
        public MousseControlsActions(@MouseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Vertical => m_Wrapper.m_MousseControls_Vertical;
        public InputAction @Horizontal => m_Wrapper.m_MousseControls_Horizontal;
        public InputActionMap Get() { return m_Wrapper.m_MousseControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MousseControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMousseControlsActions instance)
        {
            if (m_Wrapper.m_MousseControlsActionsCallbackInterface != null)
            {
                @Vertical.started -= m_Wrapper.m_MousseControlsActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_MousseControlsActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_MousseControlsActionsCallbackInterface.OnVertical;
                @Horizontal.started -= m_Wrapper.m_MousseControlsActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_MousseControlsActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_MousseControlsActionsCallbackInterface.OnHorizontal;
            }
            m_Wrapper.m_MousseControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
            }
        }
    }
    public MousseControlsActions @MousseControls => new MousseControlsActions(this);
    public interface IMousseControlsActions
    {
        void OnVertical(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
    }
}
