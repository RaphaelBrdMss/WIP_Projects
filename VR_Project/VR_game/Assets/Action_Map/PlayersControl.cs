//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Action_Map/PlayersControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayersControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayersControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersControl"",
    ""maps"": [
        {
            ""name"": ""GroundMouvement"",
            ""id"": ""e30d6329-c917-4527-96cd-f6a2e371bd1f"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMouvment"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1f3878c6-52d1-48cd-b079-2756b8d56502"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b42f3cf6-2ae3-4a7b-bd06-0c66800658bd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7c7d1651-7ffb-49b0-a146-59e740673ffd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""5fb9f336-cb0b-45d2-9b6f-5792eea2eae7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMouvment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec4087de-82a4-4585-90ed-32f402b5595f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMouvment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b2a3c3ea-4ce7-4cc6-9277-4fd3eec4c539"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMouvment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""74754c06-db64-482b-a2da-de45a4d482ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMouvment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf95c820-abce-4887-9dca-0f8aa36307fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMouvment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47f26b4a-15d0-4122-94bc-b402826df27e"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""342e2fc8-2e2c-45fa-90c8-9bc2e1a23b2b"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GroundMouvement
        m_GroundMouvement = asset.FindActionMap("GroundMouvement", throwIfNotFound: true);
        m_GroundMouvement_HorizontalMouvment = m_GroundMouvement.FindAction("HorizontalMouvment", throwIfNotFound: true);
        m_GroundMouvement_MouseX = m_GroundMouvement.FindAction("MouseX", throwIfNotFound: true);
        m_GroundMouvement_MouseY = m_GroundMouvement.FindAction("MouseY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMouvement
    private readonly InputActionMap m_GroundMouvement;
    private IGroundMouvementActions m_GroundMouvementActionsCallbackInterface;
    private readonly InputAction m_GroundMouvement_HorizontalMouvment;
    private readonly InputAction m_GroundMouvement_MouseX;
    private readonly InputAction m_GroundMouvement_MouseY;
    public struct GroundMouvementActions
    {
        private @PlayersControl m_Wrapper;
        public GroundMouvementActions(@PlayersControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMouvment => m_Wrapper.m_GroundMouvement_HorizontalMouvment;
        public InputAction @MouseX => m_Wrapper.m_GroundMouvement_MouseX;
        public InputAction @MouseY => m_Wrapper.m_GroundMouvement_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_GroundMouvement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMouvementActions set) { return set.Get(); }
        public void SetCallbacks(IGroundMouvementActions instance)
        {
            if (m_Wrapper.m_GroundMouvementActionsCallbackInterface != null)
            {
                @HorizontalMouvment.started -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnHorizontalMouvment;
                @HorizontalMouvment.performed -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnHorizontalMouvment;
                @HorizontalMouvment.canceled -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnHorizontalMouvment;
                @MouseX.started -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_GroundMouvementActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_GroundMouvementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalMouvment.started += instance.OnHorizontalMouvment;
                @HorizontalMouvment.performed += instance.OnHorizontalMouvment;
                @HorizontalMouvment.canceled += instance.OnHorizontalMouvment;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public GroundMouvementActions @GroundMouvement => new GroundMouvementActions(this);
    public interface IGroundMouvementActions
    {
        void OnHorizontalMouvment(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
}
